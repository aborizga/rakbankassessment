name: Java Maven Build & Publish Artifact

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
  push:
    branches: [ "main", "legacy" ]
  pull_request:
    branches: [ "main", "legacy" ]
jobs:
  build:
    name: Build & Publish Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn -e clean install
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: target/DemoApp-0.0.1-SNAPSHOT.war


  Install-AWS-CLI:
    name: Install AWS CLI
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Update apt-get
        run: sudo apt-get update
      - name: Install AWS CLI
        run: sudo apt-get install -y awscli

  upload-to-s3:
    runs-on: ubuntu-latest
    needs: Install-AWS-CLI
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: Package
        path: target/DemoApp-0.0.1-SNAPSHOT.war
      
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      
    - name: Upload file to S3
      run: ls -lah target && aws s3 cp target/DemoApp-0.0.1-SNAPSHOT.war s3://rakbanks3/ --recursive
        
  Build-push-Docker-image:
    name: Build and Push Docker Image
    needs: upload-to-s3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Package
          path: target/DemoApp-0.0.1-SNAPSHOT.war
      - name: listing
        run: pwd && ls -la
      - name: build d image
        run: docker build -t my-tomcat-app .
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      - name: Tag Docker image
        run: |
          docker tag my-tomcat-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/rkbank:latest
      - name: Push Docker image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/rkbank:latest

  # Docker-Scout:
  #     - name: Scan Docker image with Docker Scout
  #     - runs-on: ubuntu-latest
  #       needs: Build-push-Docker-image
  #       steps:
  #             - name: Checkout code
  #               uses: actions/checkout@v3
  #             - name: Install Docker Scout
  #               run: docker pull dockerscout/image_name
  #             - name: Scan Docker image
  #               run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock dockerscout/vuln-image-scan -i my-tomcat-app:latest
  Deploy-To-EKS:
    name: create k8 deployment
    needs: Build-push-Docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name rakbank_cluster --region ${{secrets.AWS_REGION}} #pull kubectl config
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
      - name: deploy
        run: kubectl apply -f deployment.yml